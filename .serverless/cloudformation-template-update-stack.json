{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ManualUnderscoreentryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-manual_entry"
      }
    },
    "CreateUnderscorebudgetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-create_budget"
      }
    },
    "SingleUnderscoretransactionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-single_transaction"
      }
    },
    "MonthlyUnderscoretransactionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-monthly_transactions"
      }
    },
    "AssignUnderscorebudgetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-assign_budget"
      }
    },
    "AddUnderscoreattachmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-add_attachment"
      }
    },
    "DeleteUnderscoretransactionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-delete_transaction"
      }
    },
    "BillingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/budget-app-prod-billing"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "prod",
                  "budget-app",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/budget-app-prod*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/budget-app-prod*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "budget-app",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::802587217904:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "ServerlessEnterprise-p9q58CpS1rWGh5yxnP"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogFilterAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:FilterLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ManualUnderscoreentryLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "CreateUnderscorebudgetLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SingleUnderscoretransactionLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "MonthlyUnderscoretransactionsLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AssignUnderscorebudgetLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AddUnderscoreattachmentLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeleteUnderscoretransactionLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "BillingLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ManualUnderscoreentryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/manual_entry.zip"
        },
        "FunctionName": "budget-app-prod-manual_entry",
        "Handler": "s_manual_entry.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "ManualUnderscoreentryLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ManualUnderscoreentryLambdaVersion0i8Att62ePwZ1HeXXnS8Ne0cvLv1WNi2ZSm4P4TPHg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ManualUnderscoreentryLambdaFunction"
        },
        "CodeSha256": "nrU2mcdMJ1Kr5k1bhl2zrCVQ50yaASYo1bPgPW187P8="
      }
    },
    "CreateUnderscorebudgetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/create_budget.zip"
        },
        "FunctionName": "budget-app-prod-create_budget",
        "Handler": "s_create_budget.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "CreateUnderscorebudgetLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateUnderscorebudgetLambdaVersionRyoebWDnehNcLcHnv4FccxsRsulBve23skVIO9jMPQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUnderscorebudgetLambdaFunction"
        },
        "CodeSha256": "1KrJrp3GaAXeObeR+E6AmOJwDOZZIITLLxmz0Su1F5M="
      }
    },
    "SingleUnderscoretransactionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/single_transaction.zip"
        },
        "FunctionName": "budget-app-prod-single_transaction",
        "Handler": "s_single_transaction.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "SingleUnderscoretransactionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SingleUnderscoretransactionLambdaVersionXoxaqm8bpmhNRCkc7iTHUqtnPfBPAtuBTuvHt9uaxI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SingleUnderscoretransactionLambdaFunction"
        },
        "CodeSha256": "58532kHjYrvdN6HCRXCnyDQoo5Xd6dIxig3YxnV3/4Q="
      }
    },
    "MonthlyUnderscoretransactionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/monthly_transactions.zip"
        },
        "FunctionName": "budget-app-prod-monthly_transactions",
        "Handler": "s_monthly_transactions.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "MonthlyUnderscoretransactionsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "MonthlyUnderscoretransactionsLambdaVersion3w1BnRapt6gN8ouf9yjVDn1lMWArmK9xpPrlm0JX5lg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MonthlyUnderscoretransactionsLambdaFunction"
        },
        "CodeSha256": "j5loF5iJHazLacgLqBZ2eudueGZQCn07HVSvSpCj1fo="
      }
    },
    "AssignUnderscorebudgetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/assign_budget.zip"
        },
        "FunctionName": "budget-app-prod-assign_budget",
        "Handler": "s_assign_budget.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "AssignUnderscorebudgetLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "AssignUnderscorebudgetLambdaVersionpmmXnfwJN5Hi19i4AV6tKRAOe8UBfNZ77DweoLUtE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AssignUnderscorebudgetLambdaFunction"
        },
        "CodeSha256": "cGgr1ZwsI+r5GdUnsIYhNWjwVypLyCrv7Q/scuieJXQ="
      }
    },
    "AddUnderscoreattachmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/add_attachment.zip"
        },
        "FunctionName": "budget-app-prod-add_attachment",
        "Handler": "s_add_attachment.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "AddUnderscoreattachmentLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "AddUnderscoreattachmentLambdaVersionVtaEXwJo3J2olu1bJUVV1k9hVh22d1lWhwqqTL4bs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddUnderscoreattachmentLambdaFunction"
        },
        "CodeSha256": "c0N0Qxqr8ypjI9eygKXedL1oghk3Kmz811vOJt3fYPk="
      }
    },
    "DeleteUnderscoretransactionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/delete_transaction.zip"
        },
        "FunctionName": "budget-app-prod-delete_transaction",
        "Handler": "s_delete_transaction.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "DeleteUnderscoretransactionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeleteUnderscoretransactionLambdaVersiongXmSheWhuHdyBS79nUWjvcY4hIbM7ZiRMbb3NfPxPo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUnderscoretransactionLambdaFunction"
        },
        "CodeSha256": "R2frJvXw3HoLgNNvQsREZ0guv2owimzAy0Y7luzybtI="
      }
    },
    "BillingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/billing.zip"
        },
        "FunctionName": "budget-app-prod-billing",
        "Handler": "s_billing.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "tableName": "Transactions",
            "tableBudgetName": "Budgets",
            "tableLOName": "Leftovers",
            "stripeSecretKey": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ",
            "STRIPE_SECRET_KEY": "sk_test_m9QiH6Xj1CEG9bObsbCPFOKo00uIlUwqpQ"
          }
        }
      },
      "DependsOn": [
        "BillingLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "BillingLambdaVersionOHiY3nQsPWBsbLKduatjlIvO5RPliqD1HJAR8TmlyrU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BillingLambdaFunction"
        },
        "CodeSha256": "CMg3QESCF+sd/QBSZ93C6+f0WemAv7honS/UnXJuor8="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-budget-app",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceManualentry": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "manual_entry",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCreatebudget": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "create_budget",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSingletransaction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "single_transaction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSingletransactionTransactionidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSingletransaction"
        },
        "PathPart": "{transactionId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMonthlytransactions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "monthly_transactions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMonthlytransactionsYearmonthVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMonthlytransactions"
        },
        "PathPart": "{yearMonth}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletetransaction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "delete_transaction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletetransactionTransactionidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDeletetransaction"
        },
        "PathPart": "{transactionId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBilling": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "billing",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodManualentryOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceManualentry"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCreatebudgetOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCreatebudget"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSingletransactionTransactionidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSingletransactionTransactionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMonthlytransactionsYearmonthVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMonthlytransactionsYearmonthVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDeletetransactionTransactionidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeletetransactionTransactionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodBillingOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceBilling"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodManualentryPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceManualentry"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ManualUnderscoreentryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodCreatebudgetPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCreatebudget"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateUnderscorebudgetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodSingletransactionTransactionidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSingletransactionTransactionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SingleUnderscoretransactionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodMonthlytransactionsYearmonthVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMonthlytransactionsYearmonthVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MonthlyUnderscoretransactionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodDeletetransactionTransactionidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeletetransactionTransactionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteUnderscoretransactionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodBillingPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBilling"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BillingLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1572221990786": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodManualentryOptions",
        "ApiGatewayMethodCreatebudgetOptions",
        "ApiGatewayMethodSingletransactionTransactionidVarOptions",
        "ApiGatewayMethodMonthlytransactionsYearmonthVarOptions",
        "ApiGatewayMethodDeletetransactionTransactionidVarOptions",
        "ApiGatewayMethodBillingOptions",
        "ApiGatewayMethodManualentryPost",
        "ApiGatewayMethodCreatebudgetPost",
        "ApiGatewayMethodSingletransactionTransactionidVarGet",
        "ApiGatewayMethodMonthlytransactionsYearmonthVarGet",
        "ApiGatewayMethodDeletetransactionTransactionidVarDelete",
        "ApiGatewayMethodBillingPost"
      ]
    },
    "ManualUnderscoreentryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ManualUnderscoreentryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateUnderscorebudgetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUnderscorebudgetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SingleUnderscoretransactionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SingleUnderscoretransactionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MonthlyUnderscoretransactionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MonthlyUnderscoretransactionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteUnderscoretransactionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUnderscoretransactionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "BillingLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BillingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/budget-app-prod"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/budget-app/prod/1572222003729-2019-10-28T00:20:03.729Z/custom-resources.zip"
        },
        "FunctionName": "budget-app-prod-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Timeout": 180
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "prod",
                  "budget-app",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "arn:aws:apigateway:*::/account",
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GatewayResponseDefault4XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "GatewayResponseDefault5XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "DEFAULT_5XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterManualUnderscoreentryLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "ManualUnderscoreentryLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterCreateUnderscorebudgetLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "CreateUnderscorebudgetLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterSingleUnderscoretransactionLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "SingleUnderscoretransactionLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterMonthlyUnderscoretransactionsLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "MonthlyUnderscoretransactionsLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterAssignUnderscorebudgetLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "AssignUnderscorebudgetLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterAddUnderscoreattachmentLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "AddUnderscoreattachmentLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterDeleteUnderscoretransactionLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "DeleteUnderscoretransactionLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterBillingLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "BillingLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:p9q58CpS1rWGh5yxnP#MvbYgCk7WVsXHytgSY#budget-app#prod",
        "FilterPattern": "\"SLS_ACCESS_LOG\"",
        "LogGroupName": {
          "Ref": "ApiGatewayLogGroup"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Value": {
        "Fn::GetAtt": [
          "EnterpriseLogAccessIamRole",
          "Arn"
        ]
      }
    },
    "ManualUnderscoreentryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ManualUnderscoreentryLambdaVersion0i8Att62ePwZ1HeXXnS8Ne0cvLv1WNi2ZSm4P4TPHg"
      }
    },
    "CreateUnderscorebudgetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUnderscorebudgetLambdaVersionRyoebWDnehNcLcHnv4FccxsRsulBve23skVIO9jMPQ"
      }
    },
    "SingleUnderscoretransactionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SingleUnderscoretransactionLambdaVersionXoxaqm8bpmhNRCkc7iTHUqtnPfBPAtuBTuvHt9uaxI"
      }
    },
    "MonthlyUnderscoretransactionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MonthlyUnderscoretransactionsLambdaVersion3w1BnRapt6gN8ouf9yjVDn1lMWArmK9xpPrlm0JX5lg"
      }
    },
    "AssignUnderscorebudgetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AssignUnderscorebudgetLambdaVersionpmmXnfwJN5Hi19i4AV6tKRAOe8UBfNZ77DweoLUtE"
      }
    },
    "AddUnderscoreattachmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddUnderscoreattachmentLambdaVersionVtaEXwJo3J2olu1bJUVV1k9hVh22d1lWhwqqTL4bs"
      }
    },
    "DeleteUnderscoretransactionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUnderscoretransactionLambdaVersiongXmSheWhuHdyBS79nUWjvcY4hIbM7ZiRMbb3NfPxPo"
      }
    },
    "BillingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BillingLambdaVersionOHiY3nQsPWBsbLKduatjlIvO5RPliqD1HJAR8TmlyrU"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      }
    }
  }
}