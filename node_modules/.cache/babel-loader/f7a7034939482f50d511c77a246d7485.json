{"ast":null,"code":"import \"source-map-support/register\";\nimport uuid from \"uuid\";\nimport * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport { success, failure } from \"./libs/response-lib\";\nexport async function main(event, context, callback) {\n  const data = event;\n  const params = {\n    TableName: process.env.tableName,\n    Item: {\n      yearMonth: data.yearMonth,\n      transactionId: uuid.v1(),\n      userId: data.requestContext.identity.cognitoIdentityId,\n      transaction: {\n        bank: data.transaction.bank,\n        cardNo: data.transaction.cardNo,\n        category: data.transaction.category,\n        credit: data.transaction.credit,\n        debit: data.transaction.debit,\n        description: data.transaction.description,\n        postedDate: data.transaction.postedDate,\n        transactionDate: data.transaction.transactionDate\n      },\n      budgetId: data.budgetId,\n      createdAt: Date.now()\n    }\n  };\n\n  try {\n    await dynamoDbLib.call(\"put\", params);\n    return success(params.Item);\n  } catch (e) {\n    //console.log(e);\n    return failure({\n      status: e\n    });\n  }\n  /*dynamoDb.put(params, (error, data) => {\n  // Set response headers to enable CORS (Cross-Origin Resource Sharing)\n  \tconst headers = {\n  \t\"Access-Control-Allow-Origin\": \"*\",\n  \t\"Access-Control-Allow-Credentials\": true\n  \t};\n  \tif (error) {\n  \tconst response = {\n  \t\tstatusCode: 500,\n  \t\theaders: headers,\n  \t\tbody: JSON.stringify({ status: error })\n  \t\t};\n  \tcallback(null, response);\n  \treturn;\n  \t}\n  \tconst response = {\n  \tstatusCode: 200,\n  \theaders: headers,\n  \tbody: JSON.stringify(params.Item)\n  \t};\n  callback(null, response);\n  });*/\n\n}","map":{"version":3,"sources":["/home/robert/Projects/budget/manual_entry.js"],"names":["uuid","dynamoDbLib","success","failure","main","event","context","callback","data","params","TableName","process","env","tableName","Item","yearMonth","transactionId","v1","userId","requestContext","identity","cognitoIdentityId","transaction","bank","cardNo","category","credit","debit","description","postedDate","transactionDate","budgetId","createdAt","Date","now","call","e","status"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,WAAZ,MAA6B,qBAA7B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,qBAAjC;AAEA,OAAO,eAAeC,IAAf,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoCC,QAApC,EAA8C;AAEpD,QAAMC,IAAI,GAAGH,KAAb;AAEA,QAAMI,MAAM,GAAG;AACdC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADT;AAEdC,IAAAA,IAAI,EAAE;AACLC,MAAAA,SAAS,EAAEP,IAAI,CAACO,SADX;AAELC,MAAAA,aAAa,EAAEhB,IAAI,CAACiB,EAAL,EAFV;AAGLC,MAAAA,MAAM,EAAEV,IAAI,CAACW,cAAL,CAAoBC,QAApB,CAA6BC,iBAHhC;AAILC,MAAAA,WAAW,EAAC;AACXC,QAAAA,IAAI,EAAEf,IAAI,CAACc,WAAL,CAAiBC,IADZ;AAEXC,QAAAA,MAAM,EAAEhB,IAAI,CAACc,WAAL,CAAiBE,MAFd;AAGXC,QAAAA,QAAQ,EAAEjB,IAAI,CAACc,WAAL,CAAiBG,QAHhB;AAIXC,QAAAA,MAAM,EAAElB,IAAI,CAACc,WAAL,CAAiBI,MAJd;AAKXC,QAAAA,KAAK,EAAEnB,IAAI,CAACc,WAAL,CAAiBK,KALb;AAMXC,QAAAA,WAAW,EAAEpB,IAAI,CAACc,WAAL,CAAiBM,WANnB;AAOXC,QAAAA,UAAU,EAAErB,IAAI,CAACc,WAAL,CAAiBO,UAPlB;AAQXC,QAAAA,eAAe,EAAEtB,IAAI,CAACc,WAAL,CAAiBQ;AARvB,OAJP;AAcLC,MAAAA,QAAQ,EAAEvB,IAAI,CAACuB,QAdV;AAeLC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAfN;AAFQ,GAAf;;AAqBA,MAAI;AACH,UAAMjC,WAAW,CAACkC,IAAZ,CAAiB,KAAjB,EAAwB1B,MAAxB,CAAN;AACA,WAAOP,OAAO,CAACO,MAAM,CAACK,IAAR,CAAd;AACC,GAHF,CAIA,OAAOsB,CAAP,EAAU;AACT;AACA,WAAOjC,OAAO,CAAC;AAAEkC,MAAAA,MAAM,EAAED;AAAV,KAAD,CAAd;AACC;AAEF;;;;;;;;;;;;;;;;;;;;;;;AA0BA","sourcesContent":["import uuid from \"uuid\";\nimport * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport { success, failure } from \"./libs/response-lib\";\n\nexport async function main(event, context, callback) {\n\n\tconst data = event;\n\n\tconst params = {\n\t\tTableName: process.env.tableName,\n\t\tItem: {\n\t\t\tyearMonth: data.yearMonth,\n\t\t\ttransactionId: uuid.v1(),\n\t\t\tuserId: data.requestContext.identity.cognitoIdentityId,\n\t\t\ttransaction:{\n\t\t\t\tbank: data.transaction.bank,\n\t\t\t\tcardNo: data.transaction.cardNo,\n\t\t\t\tcategory: data.transaction.category,\n\t\t\t\tcredit: data.transaction.credit,\n\t\t\t\tdebit: data.transaction.debit,\n\t\t\t\tdescription: data.transaction.description,\n\t\t\t\tpostedDate: data.transaction.postedDate,\n\t\t\t\ttransactionDate: data.transaction.transactionDate\n\t\t\t\t},\n\t\t\tbudgetId: data.budgetId,\n\t\t\tcreatedAt: Date.now()\n\t\t\t}\n\t\t};\n\n\ttry {\n\t\tawait dynamoDbLib.call(\"put\", params);\n\t\treturn success(params.Item);\n\t\t}\n\tcatch (e) {\n\t\t//console.log(e);\n\t\treturn failure({ status: e });\n\t\t}\n\n\t/*dynamoDb.put(params, (error, data) => {\n// Set response headers to enable CORS (Cross-Origin Resource Sharing)\n\t\tconst headers = {\n\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\"Access-Control-Allow-Credentials\": true\n\t\t};\n\n\tif (error) {\n\t\tconst response = {\n\t\t\tstatusCode: 500,\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify({ status: error })\n\t\t\t};\n\t\tcallback(null, response);\n\t\treturn;\n\t\t}\n\n\tconst response = {\n\t\tstatusCode: 200,\n\t\theaders: headers,\n\t\tbody: JSON.stringify(params.Item)\n\t\t};\n\tcallback(null, response);\n\t});*/\n\n\n}"]},"metadata":{},"sourceType":"module"}